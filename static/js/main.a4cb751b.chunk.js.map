{"version":3,"sources":["componetes/MovieRow.js","Tmdb.js","componetes/FeaturedMovie.js","componetes/Header.js","App.js","index.js"],"names":["title","items","useState","scrollx","setScrollX","className","onClick","x","Math","round","window","innerWidth","listW","results","length","style","marginLeft","width","map","item","key","src","poster_path","alt","original_title","API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","getMovieinfo","movieid","type","info","firstDate","Date","first_air_date","genres","i","push","name","descripcion","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedata","blackHeader","setBlackHeader","useEffect","loadAll","Tmdb","list","original","filter","randonsfilm","floor","random","elegido","elegidoinfo","scrollListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGc,cAAmB,IAAjBA,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACnB,EAA4BC,oBAAU,KAAtC,mBAAMC,EAAN,KAAeC,EAAf,KAgBA,OACI,sBAAKC,UAAU,WAAf,UACG,6BAAKL,IACA,qBAAKK,UAAU,iBAAiBC,QAlBpB,WACpB,IAAIC,EAAIJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAW,GAC5CJ,EAAE,IACDA,EAAE,GAENH,EAAWG,IAaH,sBACA,qBAAKF,UAAU,kBAAkBC,QAZpB,WACrB,IAAIC,EAAIJ,EAAUK,KAAKC,MAAMC,OAAOC,WAAW,GAC3CC,EAA+B,IAAvBX,EAAMY,QAAQC,OACrBJ,OAAOC,WAAWC,EAAQL,IAC3BA,EAAEG,OAAOC,WAAWC,EAAQ,IAEhCR,EAAWG,IAMH,sBACA,qBAAKF,UAAU,qBAAf,SACI,qBAAKA,UAAU,iBAAiBU,MAAO,CACnCC,WAAYb,EACZc,MAA+B,IAAvBhB,EAAMY,QAAQC,QAF1B,SAICb,EAAMY,QAAQC,OAAS,GAAKb,EAAMY,QAAQK,KAAI,SAACC,EAAMC,GAAP,OAC3C,qBAAKf,UAAU,iBAAf,SACA,qBAAKgB,IAAG,yCAAoCF,EAAKG,aAAeC,IAAKJ,EAAKK,8BChC5FC,EAAU,mCAcTC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACEC,MAAM,GAAD,OAdV,gCAcU,OAAeF,IADtB,cACVG,EADU,gBAEGA,EAAIC,OAFP,cAEVA,EAFU,yBAGTA,GAHS,2CAAH,sDAMH,GAEVC,YAAY,WAAD,4BAAE,sBAAAJ,EAAA,sEAKYF,EAAW,wDAAD,OAAyDD,IAL/E,gCAGDQ,KAAM,WACNjC,MAAO,wBACPC,MALC,eAUYyB,EAAW,6CAAD,OAA8CD,IAVpE,gCAQDQ,KAAM,WACNjC,MAAO,uBACPC,MAVC,gBAeYyB,EAAW,2CAAD,OAA4CD,IAflE,iCAaDQ,KAAM,WACNjC,MAAO,gBACPC,MAfC,gBAoBYyB,EAAW,yDAAD,OAA0DD,IApBhF,iCAkBDQ,KAAM,SACNjC,MAAO,SACPC,MApBC,gBAyBYyB,EAAW,yDAAD,OAA0DD,IAzBhF,iCAuBDQ,KAAM,SACNjC,MAAO,UACPC,MAzBC,gBA8BYyB,EAAW,yDAAD,OAA0DD,IA9BhF,mCA4BDQ,KAAM,SACNjC,MAAO,SACPC,MA9BC,iBAmCYyB,EAAW,4DAAD,OAA6DD,IAnCnF,mCAiCDQ,KAAM,UACNjC,MAAO,UACPC,MAnCC,iBAwCYyB,EAAW,yDAAD,OAA0DD,IAxChF,mCAsCDQ,KAAM,cACNjC,MAAO,eACPC,MAxCC,mHAAF,kDAAC,GA4CZiC,aAAa,WAAD,4BAAE,WAAMC,EAASC,GAAf,eAAAR,EAAA,yDACNS,EAAK,IAELF,EAHM,sBAIEC,EAJF,OAKG,UALH,OAQG,OARH,uCAMeV,EAAW,UAAD,OAAWS,EAAX,mCAA6CV,IANtE,cAMEY,EANF,oDASeX,EAAW,OAAD,OAAQS,EAAR,mCAA0CV,IATnE,eASEY,EATF,iGAiBHA,GAjBG,4CAAF,qDAAC,IC/DF,G,MAAA,YAAY,IAAVlB,EAAS,EAATA,KACTmB,EAAY,IAAIC,KAAKpB,EAAKqB,gBAC1BC,EAAO,GACX,IAAK,IAAIC,KAAKvB,EAAKsB,OACfA,EAAOE,KAAKxB,EAAKsB,OAAOC,GAAGE,MAK/B,IAAIC,EAAc1B,EAAK2B,SAIvB,OAHID,EAAY/B,OAAO,MACnB+B,EAAcA,EAAYE,UAAU,EAAG,KAAK,QAGhD,yBAAS1C,UAAU,WAAWU,MAAO,CACjCiC,eAAgB,QAChBC,mBAAoB,SACpBC,gBAAgB,0CAAD,OAA4C/B,EAAKgC,cAAjD,MAHnB,SAKI,qBAAK9C,UAAU,qBAAf,SACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,iBAAf,SAAiCc,EAAKiC,gBACtC,sBAAK/C,UAAU,iBAAf,UACI,sBAAKA,UAAU,mBAAf,UACKc,EAAKkC,aADV,aAIA,qBAAKhD,UAAU,iBAAf,SAAiCiC,EAAUgB,gBAC3C,sBAAKjD,UAAU,oBAAf,UAAoCc,EAAKoC,kBAAzC,aAAiG,IAA3BpC,EAAKoC,kBAAyB,IAAK,SAE7G,qBAAKlD,UAAU,wBAAf,SAAwCwC,IACxC,sBAAKxC,UAAU,oBAAf,UACC,mBAAGmD,KAAI,iBAAYrC,EAAKsC,IAAMpD,UAAU,wBAAxC,+BACA,mBAAGmD,KAAI,oBAAerC,EAAKsC,IAAMpD,UAAU,yBAA3C,uCAED,sBAAKA,UAAU,mBAAf,UAAkC,8CAAlC,IAA6DoC,EAAOiB,KAAK,kBCnC1E,G,MAAA,YAAY,IAAVC,EAAS,EAATA,MACb,OACI,yBAAQtD,UAAWsD,EAAQ,QAAQ,GAAnC,UACI,qBAAKtD,UAAU,eAAf,SACD,mBAAGmD,KAAK,IAAR,SACK,qBAAKnC,IAAI,4EAA4EE,IAAI,gBAG9F,qBAAKlB,UAAU,eAAf,SACI,mBAAGmD,KAAK,IAAR,SACI,qBAAKnC,IAAI,gFAAgFE,IAAI,cCNjG,aAEb,MAAgCrB,mBAAS,IAAzC,mBAAO0D,EAAP,KAAkBC,EAAlB,KACA,EAAqC3D,mBAAS,MAA9C,mBAAO4D,EAAP,KAAqBC,EAArB,KACA,EAAoC7D,oBAAS,GAA7C,mBAAO8D,EAAP,KAAoBC,EAApB,KAkCA,OAhCAC,qBAAU,WACR,IAAMC,EAAO,uCAAG,oCAAAvC,EAAA,sEAEGwC,EAAKpC,cAFR,cAEVqC,EAFU,OAGdR,EAAaQ,GAGTC,EAAWD,EAAKE,QAAO,SAAA7B,GAAC,MAAY,aAAVA,EAAET,QAC5BuC,EAAchE,KAAKiE,MAAMjE,KAAKkE,UAAYJ,EAAS,GAAGrE,MAAMY,QAAQC,OAAQ,IAC5E6D,EAAUL,EAAS,GAAGrE,MAAMY,QAAQ2D,GAR1B,SAUUJ,EAAKlC,aAAayC,EAAQlB,GAAI,MAVxC,OAUVmB,EAVU,OAWdb,EAAea,GAXD,4CAAH,qDAcbT,MACC,IAEHD,qBAAU,WACR,IAAMW,EAAiB,WACjBnE,OAAOoE,QAAQ,GACjBb,GAAe,GAEfA,GAAe,IAKnB,OADAvD,OAAOqE,iBAAiB,SAAUF,GAC3B,WACLnE,OAAOsE,oBAAoB,SAAUH,MAEtC,IAED,sBAAKxE,UAAU,OAAf,UACE,cAAC,EAAD,CAAQsD,MAAOK,IACdF,GACD,cAAC,EAAD,CAAe3C,KAAM2C,IAEnB,yBAASzD,UAAU,QAAnB,SACGuD,EAAU1C,KAAI,SAACC,EAAMC,GAAP,OAEX,cAAC,EAAD,CAAoBpB,MAAOmB,EAAKnB,MAAOC,MAAOkB,EAAKlB,OAApCmB,QAIrB,2CAGCwC,GAAW,GACZ,qBAAKvD,UAAU,UAAf,SACE,qBAAKgB,IAAI,2DAA2DE,IAAI,yBC1DlF0D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a4cb751b.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './MovieRow.css';\n\nexport default({title, items})=>{\n    const[scrollx, setScrollX]= useState(-400)\n    const handleLeftArrow = () => {\n        let x = scrollx + Math.round(window.innerWidth/2);\n        if(x>0){\n            x=0;\n        }\n        setScrollX(x)\n    }\n    const handlerightArrow = () =>{\n        let x = scrollx - Math.round(window.innerWidth/2);\n        let listW = items.results.length * 150\n        if ((window.innerWidth-listW)> x) {\n            x=window.innerWidth-listW - 60\n        }\n        setScrollX(x);\n    }\n    return(\n        <div className=\"movieRow\">\n           <h2>{title}</h2>\n                <div className=\"movieRow--left\" onClick={handleLeftArrow}> ← </div>\n                <div className=\"movieRow--right\" onClick={handlerightArrow}> → </div>\n                <div className=\"movieRow--listarea\">\n                    <div className=\"movieRow--list\" style={{\n                        marginLeft: scrollx,\n                        width : items.results.length * 150\n                    }}>\n                    {items.results.length > 0 && items.results.map((item, key)=>(\n                        <div className=\"movieRow--item\">\n                        <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}></img>\n                        </div>\n                    ))}\n                    </div>\n                    \n               </div> \n        </div>\n\n    );\n}","const API_KEY = '38c007f28d5b66f36b9c3cf8d8452a4b';\nconst API_BASE = 'https://api.themoviedb.org/3'\n\n/*\n-original de netflix\n-recomendados(tredint)\n-top rated\n-action\n-comedia\n-terror\n-romance\n-documentarios \n */\n\n const basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n }\n\nexport default{\n\n    getHomeList: async () =>{\n        return[\n            {\n                slug: 'original',\n                title: 'Originales de netflix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=es-ES&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para ti',\n                items: await basicFetch(`/trending/all/week?language=es-ES&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'TOP PELICULAS',\n                items: await basicFetch(`/movie/top_rated?language=es-ES&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Accion',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=es-Es&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comedia',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=es-Es&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=es-Es&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=es-Es&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentales',\n                items: await basicFetch(`/discover/movie?with_genres=99&language=es-Es&api_key=${API_KEY}`)\n            },\n        ]\n    },\n    getMovieinfo: async(movieid, type)=>{\n        let info={};\n\n        if (movieid) {\n            switch (type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieid}?language=es-Es&api_key=${API_KEY}`);\n                    break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieid}?language=es-Es&api_key=${API_KEY}`);\n                    break;\n            \n                default:\n                   \n                    break;\n            }\n        }\n        return info\n    }\n}","import react from 'react';\nimport './FeaturedMovie.css'\n\nexport default ({item}) =>{\n    let firstDate = new Date(item.first_air_date);\n    let genres=[];\n    for (let i in item.genres) {\n        genres.push(item.genres[i].name)\n        \n    }\n\n\n    let descripcion = item.overview;\n    if (descripcion.length>200){\n        descripcion = descripcion.substring(0, 200)+' ...'\n    }\n    return(\n    <section className=\"featured\" style={{\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n    }}>\n        <div className=\"featured--vertical\">\n            <div className=\"featured--horizontal\">\n                <div className=\"featured--name\">{item.original_name}</div>\n                <div className=\"featured--info\">\n                    <div className=\"featured--points\">\n                        {item.vote_average} puntos\n                    </div>\n                    \n                    <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                    <div className=\"featured--seasons\">{item.number_of_seasons} Temporada{item.number_of_seasons !== 1? 's': ''}</div>\n                </div>\n                <div className=\"featured--description\">{descripcion}</div>\n                <div className=\"featured--buttons\">\n                 <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Reproducir</a>\n                 <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Añadir a la Lista</a>\n                </div>\n                <div className=\"featured--genres\"><strong>Generos:</strong> {genres.join(', ')}</div>\n            </div>\n        </div>\n    </section>\n    )\n    \n}","import React from 'react';\nimport './Header.css';\n\nexport default ({black})=>{\n    return(\n        <header className={black ? 'black':''}>\n            <div className=\"header--logo\">\n           <a href=\"/\">\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"netflix\"/>\n           </a>\n           </div>\n           <div className=\"header--user\">\n               <a href=\"/\">\n                   <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"\"></img>\n               </a>\n           </div>\n        </header>\n    )\n}","import React,{useEffect, useState} from 'react';\nimport './App.css'\nimport MovieRow from './componetes/MovieRow';\nimport Tmdb from './Tmdb'\nimport FeaturedMovie from './componetes/FeaturedMovie'\nimport Header from './componetes/Header';\n\nexport default ()=>{\n\n  const [movieList, setMovieList]=useState([])\n  const [featuredData, setFeaturedata]=useState(null)\n  const [blackHeader, setBlackHeader]=useState(false);\n\n  useEffect(()=>{\n    const loadAll = async () => {\n      //pegar la lista de todo\n      let list = await Tmdb.getHomeList();\n      setMovieList(list)\n\n      //pegar el destacado\n      let original = list.filter(i=>i.slug=== 'original');\n      let randonsfilm = Math.floor(Math.random() * (original[0].items.results.length -1));\n      let elegido = original[0].items.results[randonsfilm];\n\n      let elegidoinfo = await Tmdb.getMovieinfo(elegido.id, 'tv');\n      setFeaturedata(elegidoinfo);\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = () =>{\n      if (window.scrollY>10) {\n        setBlackHeader(true);\n      }else{\n        setBlackHeader(false);\n      }\n\n    }\n    window.addEventListener('scroll', scrollListener);\n    return () =>{\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, []);\n  return(\n    <div className=\"page\">\n      <Header black={blackHeader}/>\n      {featuredData &&\n      <FeaturedMovie item={featuredData}/>\n      }\n        <section className=\"lists\">\n          {movieList.map((item, key)=>(\n            \n              <MovieRow key={key} title={item.title} items={item.items}/>\n            \n          ))}\n        </section>\n        <footer>\n          EDWIN\n        </footer>\n        {movieList<=0 &&\n        <div className=\"loading\">\n          <img src=\"https://c.tenor.com/DQyztbEmqnYAAAAM/netflix-loading.gif\" alt=\"cri dame amore\"></img>\n        </div>\n        }\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}